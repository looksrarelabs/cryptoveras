{"version":3,"sources":["lib/candyMachine.ts","lib/constants.ts","lib/accounts.ts","lib/instructions.ts","lib/types.ts","components/HeaderButton.tsx","components/Typography.tsx","components/RoadmapSection.tsx","components/Home.tsx","components/NFTList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","CANDY_MACHINE","CANDY_MACHINE_PROGRAM_ID","CONFIG_ARRAY_START","CONFIG_LINE_SIZE","TREASURY","CANDY_MACHINE_CONFIG","CANDY_MACHINE_ID","NETWORK","PUBLIC_URL","process","createConfigAccount","anchorProgram","configData","payerWallet","configAccount","size","maxNumberOfLines","Math","ceil","MetadataKey","HeaderButton","withStyles","root","backgroundImage","lineHeight","padding","Button","HeaderText","props","style","fontWeight","fontSize","children","Title","Subtitle","Text","RoadmapSection","title","subtitle","text","image","reverse","content","flexShrink","margin","width","display","gap","color","alignItems","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","renderCounter","days","hours","minutes","seconds","completed","Home","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsRemaining","aboutRef","useRef","roadmapRef","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","backgroundColor","Container","maxWidth","paddingTop","position","src","animationDuration","aspectRatio","height","top","left","right","flexDirection","onClick","current","scrollIntoView","borderRadius","textAlign","marginBottom","ref","marginTop","justifyContent","Grid","container","direction","justify","minHeight","item","xs","toBase58","toLocaleString","disabled","variant","CircularProgress","date","onMount","onComplete","renderer","Snackbar","autoHideDuration","onClose","Alert","Creator","args","verified","share","this","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","key","primarySaleHappened","isMutable","edition","MetadataV1","METADATA_SCHEMA","Map","supply","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","kind","fields","type","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","NFTList","useConnection","useWallet","adapter","setAccounts","nfts","getParsedTokenAccountsByOwner","accs","candyAddress","val","parsed","info","meta","getAccountInfo","m","buffer","decoded","borsh","bytes","push","fn","rpcHost","Connection","startDateSeed","parseInt","theme","createTheme","palette","overrides","MuiButtonBase","MuiButton","textTransform","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","network","getSolletExtensionWallet","getLedgerWallet","getBloctoWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.608cb587.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\"\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\"\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n)\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n)\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n)\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n  program: anchor.Program\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine\n  itemsAvailable: number\n  itemsRedeemed: number\n  itemsRemaining: number\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  }\n  let subId = 0\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return\n      }\n      done = true\n      console.log(\"Rejecting for timeout...\")\n      reject({ timeout: true })\n    }, timeout)\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          }\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err)\n            reject(status)\n          } else {\n            console.log(\"Resolved via websocket\", result)\n            resolve(status)\n          }\n        },\n        commitment\n      )\n    } catch (e) {\n      done = true\n      console.error(\"WS error in setup\", txid, e)\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ])\n          status = signatureStatuses && signatureStatuses.value[0]\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status)\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status)\n              done = true\n              reject(status.err)\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status)\n            } else {\n              console.log(\"REST confirmation for\", txid, status)\n              done = true\n              resolve(status)\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e)\n          }\n        }\n      })()\n      await sleep(2000)\n    }\n  })\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId)\n  }\n  done = true\n  console.log(\"Returning status\", status)\n  return status\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  })\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  })\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  )\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider)\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId)\n  const itemsAvailable = state.data.itemsAvailable.toNumber()\n  const itemsRedeemed = state.itemsRedeemed.toNumber()\n  const itemsRemaining = itemsAvailable - itemsRedeemed\n\n  let goLiveDate = state.data.goLiveDate.toNumber()\n  goLiveDate = new Date(goLiveDate * 1000)\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  }\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0]\n}\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0]\n}\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate()\n  const token = await getTokenWallet(payer, mint.publicKey)\n  const { connection, program } = candyMachine\n  const metadata = await getMetadata(mint.publicKey)\n  const masterEdition = await getMasterEdition(mint.publicKey)\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  )\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  })\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`\n}\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}","import { PublicKey } from '@solana/web3.js'\nimport * as anchor from \"@project-serum/anchor\"\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\n\nexport const CANDY_MACHINE = 'candy_machine'\n\nexport const CANDY_MACHINE_PROGRAM_ID = new PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n)\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n)\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n)\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n)\n\nexport const CONFIG_ARRAY_START =\n  32 + // authority\n  4 +\n  6 + // uuid + u32 len\n  4 +\n  10 + // u32 len + symbol\n  2 + // seller fee basis points\n  1 +\n  4 +\n  5 * 34 + // optional + u32 len + actual vec\n  8 + //max supply\n  1 + //is mutable\n  1 + // retain authority\n  4 // max number of lines;\nexport const CONFIG_LINE_SIZE = 4 + 32 + 4 + 200\n\nexport const CACHE_PATH = './.cache'\n\nexport const DEFAULT_TIMEOUT = 15000\n\nexport const EXTENSION_PNG = '.png'\nexport const EXTENSION_JSON = '.json'\n\nexport const TREASURY = new anchor.web3.PublicKey(\n  '7HwCihoUb7dqTADf1eiQWF8xpXktXBGVyPRL6wJsW4w3'\n)\n\nexport const CANDY_MACHINE_CONFIG = new anchor.web3.PublicKey(\n  // 'H3jCihpqo8wxyx75zD1zkHP8UYdHv95mC83JnhTdzvmV'\n  'EPiLkpyrC1eVX6CeHYwJaZwu8pz5A52RMBtxH4dFgWVy'\n)\n\nexport const CANDY_MACHINE_ID = new anchor.web3.PublicKey(\n  // '3nLDcWScNi3ckzgLDLUN28vHxggYuwPRjGMWJ9TD6FtF'\n  '8JGeAZVEfYqV8ot9AArRpYdL83ZqtMR4nkuoLwYsuTBd'\n)\n\nexport const NETWORK = 'devnet' as WalletAdapterNetwork\n\n// export const PUBLIC_URL = '/cryptoveras'\nexport const PUBLIC_URL = process.env.PUBLIC_URL || ''","import { Connection, Keypair, PublicKey, SystemProgram } from '@solana/web3.js'\nimport {\n  CANDY_MACHINE,\n  CANDY_MACHINE_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from './constants'\nimport * as anchor from '@project-serum/anchor'\nimport fs from 'fs'\nimport BN from \"bn.js\"\nimport { createConfigAccount } from \"./instructions\"\nimport { Wallet } from '@solana/wallet-adapter-wallets'\nimport { SignerWalletAdapter, WalletAdapter } from '@solana/wallet-adapter-base'\n\nexport const createConfig = async function (\n  anchorProgram: anchor.Program,\n  payerWallet: Keypair,\n  configData: {\n    maxNumberOfLines: BN\n    symbol: string\n    sellerFeeBasisPoints: number\n    isMutable: boolean\n    maxSupply: BN\n    retainAuthority: boolean\n    creators: {\n      address: PublicKey\n      verified: boolean\n      share: number\n    }[]\n  },\n) {\n  const configAccount = Keypair.generate()\n  const uuid = configAccount.publicKey.toBase58().slice(0, 6)\n\n  return {\n    config: configAccount.publicKey,\n    uuid,\n    txId: await anchorProgram.rpc.initializeConfig(\n      {\n        uuid,\n        ...configData,\n      },\n      {\n        accounts: {\n          config: configAccount.publicKey,\n          authority: payerWallet.publicKey,\n          payer: payerWallet.publicKey,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers: [payerWallet, configAccount],\n        instructions: [\n          await createConfigAccount(\n            anchorProgram,\n            configData,\n            payerWallet.publicKey,\n            configAccount.publicKey,\n          ),\n        ],\n      },\n    ),\n  }\n}\n\nexport const getTokenWallet = async function (\n  wallet: PublicKey,\n  mint: PublicKey,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    )\n  )[0]\n}\n\nexport const getCandyMachineAddress = async (\n  config: anchor.web3.PublicKey,\n  uuid: string,\n) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  )\n}\n\nexport const getConfig = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), authority.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  )\n}\n\nexport const getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0]\n}\n\nexport const getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0]\n}\n\nexport function loadWalletKey(keypair): Keypair {\n  return Keypair.fromSecretKey(\n    new Uint8Array(JSON.parse(fs.readFileSync(keypair).toString())),\n  )\n}\n\nexport async function loadAnchorProgram(wallet: SignerWalletAdapter, env: string) {\n  const solConnection = new anchor.web3.Connection(\n    `https://api.${env}.solana.com/`,\n  )\n  // const walletWrapper = new anchor.Wallet(walletKeyPair)\n\n  const provider = new anchor.Provider(solConnection, wallet as any, {\n    preflightCommitment: 'recent',\n  })\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM_ID, provider)\n  // console.log(JSON.stringify(idl, null, 2))\n  return new anchor.Program(idl, CANDY_MACHINE_PROGRAM_ID, provider)\n}\n","import {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js'\nimport {\n  CANDY_MACHINE_PROGRAM_ID,\n  CONFIG_ARRAY_START,\n  CONFIG_LINE_SIZE,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from './constants'\nimport * as anchor from '@project-serum/anchor'\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: PublicKey,\n  payer: PublicKey,\n  walletAddress: PublicKey,\n  splTokenMintAddress: PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  })\n}\n\nexport async function createConfigAccount(\n  anchorProgram,\n  configData,\n  payerWallet,\n  configAccount,\n) {\n  const size =\n    CONFIG_ARRAY_START +\n    4 +\n    configData.maxNumberOfLines.toNumber() * CONFIG_LINE_SIZE +\n    4 +\n    Math.ceil(configData.maxNumberOfLines.toNumber() / 8)\n\n  return anchor.web3.SystemProgram.createAccount({\n    fromPubkey: payerWallet,\n    newAccountPubkey: configAccount,\n    space: size,\n    lamports:\n      await anchorProgram.provider.connection.getMinimumBalanceForRentExemption(\n        size,\n      ),\n    programId: CANDY_MACHINE_PROGRAM_ID,\n  })\n}\n","import { BN } from '@project-serum/anchor'\nimport { PublicKey, AccountInfo } from '@solana/web3.js'\n\nexport class Creator {\n  address: PublicKey\n  verified: boolean\n  share: number\n\n  constructor(args: { address: PublicKey; verified: boolean; share: number }) {\n    this.address = args.address\n    this.verified = args.verified\n    this.share = args.share\n  }\n}\n\nexport interface Config {\n  authority: PublicKey\n  data: ConfigData\n}\n\nexport class ConfigData {\n  name: string\n  symbol: string\n  uri: string\n  sellerFeeBasisPoints: number\n  creators: Creator[] | null\n  maxNumberOfLines: BN | number\n  isMutable: boolean\n  maxSupply: BN\n  retainAuthority: boolean\n\n  constructor(args: {\n    name: string\n    symbol: string\n    uri: string\n    sellerFeeBasisPoints: number\n    creators: Creator[] | null\n    maxNumberOfLines: BN\n    isMutable: boolean\n    maxSupply: BN\n    retainAuthority: boolean\n  }) {\n    this.name = args.name\n    this.symbol = args.symbol\n    this.uri = args.uri\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints\n    this.creators = args.creators\n    this.maxNumberOfLines = args.maxNumberOfLines\n    this.isMutable = args.isMutable\n    this.maxSupply = args.maxSupply\n    this.retainAuthority = args.retainAuthority\n  }\n}\n\nexport type AccountAndPubkey = {\n  pubkey: string\n  account: AccountInfo<Buffer>\n}\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey\n  supply: BN\n  maxSupply?: BN\n  printingMint: PublicKey\n  oneTimePrintingAuthorizationMint: PublicKey\n  constructor(args: {\n    key: MetadataKey\n    supply: BN\n    maxSupply?: BN\n    printingMint: PublicKey\n    oneTimePrintingAuthorizationMint: PublicKey\n  }) {\n    this.key = MetadataKey.MasterEditionV1\n    this.supply = args.supply\n    this.maxSupply = args.maxSupply\n    this.printingMint = args.printingMint\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey\n  supply: BN\n  maxSupply?: BN\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2\n    this.supply = args.supply\n    this.maxSupply = args.maxSupply\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey\n  ledger: number[]\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker\n    this.ledger = args.ledger\n  }\n}\n\nexport class Edition {\n  key: MetadataKey\n  parent: PublicKey\n  edition: BN\n  constructor(args: { key: MetadataKey; parent: PublicKey; edition: BN }) {\n    this.key = MetadataKey.EditionV1\n    this.parent = args.parent\n    this.edition = args.edition\n  }\n}\n\nexport class Data {\n  name: string\n  symbol: string\n  uri: string\n  sellerFeeBasisPoints: number\n  creators: Creator[] | null\n  constructor(args: {\n    name: string\n    symbol: string\n    uri: string\n    sellerFeeBasisPoints: number\n    creators: Creator[] | null\n  }) {\n    this.name = args.name\n    this.symbol = args.symbol\n    this.uri = args.uri\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints\n    this.creators = args.creators\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey\n  updateAuthority: PublicKey\n  mint: PublicKey\n  data: Data\n  primarySaleHappened: boolean\n  isMutable: boolean\n  masterEdition?: PublicKey\n  edition?: PublicKey\n  constructor(args: {\n    updateAuthority: PublicKey\n    mint: PublicKey\n    data: Data\n    primarySaleHappened: boolean\n    isMutable: boolean\n    masterEdition?: PublicKey\n  }) {\n    this.key = MetadataKey.MetadataV1\n    this.updateAuthority = args.updateAuthority\n    this.mint = args.mint\n    this.data = args.data\n    this.primarySaleHappened = args.primarySaleHappened\n    this.isMutable = args.isMutable\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    MasterEditionV1,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['supply', 'u64'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n        ['printingMint', 'pubkey'],\n        ['oneTimePrintingAuthorizationMint', [32]],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['supply', 'u64'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['parent', [32]],\n        ['edition', 'u64'],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: 'struct',\n      fields: [\n        ['name', 'string'],\n        ['symbol', 'string'],\n        ['uri', 'string'],\n        ['sellerFeeBasisPoints', 'u16'],\n        ['creators', { kind: 'option', type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: 'struct',\n      fields: [\n        ['address', [32]],\n        ['verified', 'u8'],\n        ['share', 'u8'],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['updateAuthority', [32]],\n        ['mint', [32]],\n        ['data', Data],\n        ['primarySaleHappened', 'u8'],\n        ['isMutable', 'u8'],\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['ledger', [31]],\n      ],\n    },\n  ],\n])\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { createTheme, withStyles, makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\n\nexport const HeaderButton = withStyles({\n  root: {\n    backgroundImage: \"linear-gradient(180deg, #3D3D3D 0%, #000000 100%)\",\n    lineHeight: 1,\n    padding: \"12px 18px\",\n    \"&:hover\": {\n      backgroundImage: \"linear-gradient(180deg, #424242 0%, #050505 100%)\",\n    },\n  },\n})(Button);\n","import React from \"react\";\n\nexport const HeaderText = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 900,\n        fontSize: 48,\n        lineHeight: 2,\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport const Title = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 900,\n        fontSize: 48,\n        lineHeight: 1.5,\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport const Subtitle = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 900,\n        fontSize: 32,\n        lineHeight: 1,\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport const Text = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 400,\n        fontSize: 24,\n        lineHeight: 1.5,\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n","import React from \"react\";\nimport Image from \"material-ui-image\";\nimport { Subtitle, Text, Title } from \"./Typography\";\nimport { PUBLIC_URL } from \"../lib/constants\";\n\nexport const RoadmapSection = ({ title, subtitle, text, image, reverse = false }) => {\n  const content = [\n    <div style={{ flexShrink: 1.2 }}>\n      <div>\n        <Subtitle>{subtitle}</Subtitle>\n      </div>\n      <div style={{ margin: \"20px 0\" }}>\n        <Title>{title}</Title>\n      </div>\n      <div>\n        <Text>{text}</Text>\n      </div>\n    </div>,\n    <div style={{ width: \"100%\" }}>{image}</div>,\n  ];\n\n  return (\n    <div style={{ padding: \"100px 40px\", display: \"flex\", gap: 40, color: \"white\", alignItems: \"center\" }}>\n      {reverse ? content.reverse() : content}\n    </div>\n  );\n};\n","import { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, Container, CircularProgress, Grid, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Image from \"material-ui-image\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"../lib/candyMachine\";\nimport { PUBLIC_URL } from \"../lib/constants\";\nimport { HeaderButton } from \"./HeaderButton\";\nimport { HeaderText, Text, Title, Subtitle } from \"./Typography\";\nimport { RoadmapSection } from \"./RoadmapSection\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const aboutRef = useRef<any>(null);\n  const roadmapRef = useRef<any>(null);\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(candyMachine, props.config, wallet.publicKey, props.treasury);\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(() => {\n    (async () => {\n      if (!wallet) return;\n\n      const { candyMachine, goLiveDate, itemsRemaining } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setIsSoldOut(itemsRemaining === 0);\n      setItemsRemaining(itemsRemaining);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection, isMinting]);\n\n  return (\n    <main style={{ backgroundColor: \"black\" }}>\n      <Container maxWidth=\"lg\">\n        <div style={{ paddingTop: 98, position: \"relative\" }}>\n          <Image src={`${PUBLIC_URL}/banner.jpg`} animationDuration={1000} aspectRatio={1500 / 960} />\n          <Image\n            src={`${PUBLIC_URL}/logo.png`}\n            animationDuration={1000}\n            style={{\n              position: \"absolute\",\n              paddingTop: 0,\n              height: 200,\n              width: 200,\n              top: 70,\n              left: 88,\n              backgroundColor: \"rgba(0,0,0,0)\",\n            }}\n          />\n          <div style={{ position: \"absolute\", top: 70, right: 70, display: \"flex\", flexDirection: \"row\", gap: 10 }}>\n            <HeaderButton\n              onClick={() => {\n                if (aboutRef?.current) {\n                  aboutRef.current.scrollIntoView();\n                }\n              }}\n            >\n              About\n            </HeaderButton>\n            <HeaderButton\n              onClick={() => {\n                if (roadmapRef?.current) {\n                  roadmapRef.current.scrollIntoView();\n                }\n              }}\n            >\n              Roadmap\n            </HeaderButton>\n            <HeaderButton>Traits & Rarity</HeaderButton>\n            <HeaderButton>English</HeaderButton>\n          </div>\n          <div\n            style={{\n              position: \"absolute\",\n              backgroundImage: \"linear-gradient(180deg, #3D3D3D 0%, #000000 100%)\",\n              borderRadius: 8,\n              right: 70,\n              padding: 36,\n              top: \"50%\",\n              textAlign: \"center\",\n            }}\n          >\n            <div style={{ fontWeight: 900, color: \"white\", marginBottom: 24 }}>\n              <HeaderText style={{ fontSize: 28 }}>Enter the Crypt</HeaderText>\n            </div>\n            <div style={{ backgroundColor: \"#FFA16C\", padding: 18, fontWeight: 700, fontSize: 24 }}>\n              <span>Midnight. October 23rd</span>\n            </div>\n          </div>\n        </div>\n\n        <div ref={aboutRef} style={{ padding: 70, position: \"relative\" }}>\n          <div style={{ color: \"white\", backgroundColor: \"#151515\", padding: \"100px 50px 50px 50px\", marginTop: 100 }}>\n            <div style={{ textAlign: \"center\", margin: \"20px 0\" }}>\n              <HeaderText>The Cryptoveras</HeaderText>\n            </div>\n            <Text>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n              dolore magna aliqua. Suspendisse sed nisi lacus sed. In hac habitasse platea dictumst vestibulum rhoncus\n              est. Lacus viverra vitae congue eu consequat ac. Sapien et ligula ullamcorper malesuada proin libero nunc\n              consequat interdum. Duis at consectetur lorem donec massa sapien faucibus. Vivamus arcu felis bibendum ut.\n              Diam vel quam elementum pulvinar etiam non quam. Dignissim enim sit amet venenatis urna cursus eget nunc.\n              Sit amet aliquam id diam maecenas ultricies mi. In hendrerit gravida rutrum quisque non tellus. Sed\n              viverra ipsum nunc aliquet bibendum enim facilisis. Tincidunt praesent semper feugiat nibh. Mauris\n              pellentesque pulvinar pellentesque habitant morbi tristique senectus. Orci dapibus ultrices in iaculis\n              nunc sed augue lacus.\n            </Text>\n          </div>\n          <div\n            style={{\n              width: \"100%\",\n              position: \"absolute\",\n              top: 70,\n              left: 0,\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Image\n              src={`${PUBLIC_URL}/about.png`}\n              animationDuration={1000}\n              style={{\n                height: 200,\n                width: 200,\n                paddingTop: 0,\n                backgroundColor: \"rgba(0,0,0,0)\",\n              }}\n            />\n          </div>\n        </div>\n        <div ref={roadmapRef} style={{ color: \"white\", textAlign: \"center\" }}>\n          <Image src={`${PUBLIC_URL}/roadmap.jpg`} animationDuration={1000} aspectRatio={1440 / 886} />\n          <div style={{ margin: \"80px 0\" }}>\n            <HeaderText>The Roadmap</HeaderText>\n          </div>\n        </div>\n      </Container>\n      <section style={{ backgroundColor: \"#151515\" }}>\n        <Container>\n          <RoadmapSection\n            subtitle=\"October 16th\"\n            title=\"Giveaways from Heaven\"\n            text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Suspendisse sed nisi lacus sed. In hac habitasse platea dictumst vestibulum rhoncus est. Lacus viverra vitae congue eu consequat ac.\"\n            image={<Image src={`${PUBLIC_URL}/giveaways.jpg`} animationDuration={1000} aspectRatio={575 / 360} />}\n          />\n        </Container>\n      </section>\n      <section>\n        <Container>\n          <RoadmapSection\n            reverse\n            subtitle=\"October 16th\"\n            title=\"The Crypt Opens\"\n            text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Suspendisse sed nisi lacus sed. In hac habitasse platea dictumst vestibulum rhoncus est. Lacus viverra vitae congue eu consequat ac.\"\n            image={<Image src={`${PUBLIC_URL}/cryptopens.jpg`} animationDuration={1000} />}\n          />\n        </Container>\n      </section>\n      <section style={{ backgroundColor: \"#151515\" }}>\n        <Container>\n          <RoadmapSection\n            subtitle=\"October 16th\"\n            title=\"Secondary Sales on Magic Eden\"\n            text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Suspendisse sed nisi lacus sed. In hac habitasse platea dictumst vestibulum rhoncus est. Lacus viverra vitae congue eu consequat ac.\"\n            image={\n              <Image\n                src={`${PUBLIC_URL}/magiceden.png`}\n                animationDuration={1000}\n                aspectRatio={415 / 73}\n                style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n              />\n            }\n          />\n        </Container>\n      </section>\n      <section>\n        <Container>\n          <RoadmapSection\n            reverse\n            subtitle=\"October 31st\"\n            title=\"All SOLs Day\"\n            text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Suspendisse sed nisi lacus sed. In hac habitasse platea dictumst vestibulum rhoncus est. Lacus viverra vitae congue eu consequat ac.\"\n            image={<Image src={`${PUBLIC_URL}/allsolday.jpg`} animationDuration={1000} />}\n          />\n        </Container>\n      </section>\n      <section style={{ backgroundColor: \"#151515\" }}>\n        <Container>\n          <RoadmapSection\n            subtitle=\"November 10th\"\n            title=\"Heavenly Merch\"\n            text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Suspendisse sed nisi lacus sed. In hac habitasse platea dictumst vestibulum rhoncus est. Lacus viverra vitae congue eu consequat ac.\"\n            image={\n              <Image\n                src={`${PUBLIC_URL}/heavenlymerch.png`}\n                animationDuration={1000}\n                style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n              />\n            }\n          />\n        </Container>\n      </section>\n\n      <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        direction=\"column\"\n        justify=\"center\"\n        style={{ minHeight: \"30vh\" }}\n      >\n        <Grid item xs={3}>\n          {wallet && (\n            <Grid item>\n              <p>Address: {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n            </Grid>\n          )}\n\n          {wallet && <p>My Balance: {(balance || 0).toLocaleString()} SOL</p>}\n\n          {wallet && <p>NFTs remaining: {itemsRemaining}</p>}\n\n          <MintContainer>\n            {!wallet ? (\n              <ConnectButton>Connect Wallet</ConnectButton>\n            ) : (\n              <MintButton disabled={isSoldOut || isMinting || !isActive} onClick={onMint} variant=\"contained\">\n                {isSoldOut ? (\n                  \"SOLD OUT\"\n                ) : isActive ? (\n                  isMinting ? (\n                    <CircularProgress />\n                  ) : (\n                    \"MINT\"\n                  )\n                ) : (\n                  <Countdown\n                    date={startDate}\n                    onMount={({ completed }) => completed && setIsActive(true)}\n                    onComplete={() => setIsActive(true)}\n                    renderer={renderCounter}\n                  />\n                )}\n              </MintButton>\n            )}\n          </MintContainer>\n        </Grid>\n      </Grid>\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={10000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert onClose={() => setAlertState({ ...alertState, open: false })} severity={alertState.severity}>\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import React, { FC, useEffect, useCallback, useState } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { AccountInfo as TokenAccountInfo, Token } from \"@solana/spl-token\";\nimport { CANDY_MACHINE_ID, CANDY_MACHINE_PROGRAM_ID } from \"../lib/constants\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { getMetadata } from \"../lib/accounts\";\nimport * as borsh from \"borsh\";\nimport { AccountAndPubkey, Metadata, METADATA_SCHEMA } from \"../lib/types\";\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\"BPFLoaderUpgradeab1e11111111111111111111111\");\n\nexport const MEMO_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\n\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n\nexport const VAULT_ID = \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\";\n\nexport const AUCTION_ID = \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\";\n\nexport const METAPLEX_ID = \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\";\n\nexport const MAX_NAME_LENGTH = 32;\nexport const MAX_URI_LENGTH = 200;\nexport const MAX_SYMBOL_LENGTH = 10;\nexport const MAX_CREATOR_LEN = 32 + 1 + 1;\n\nfunction decodeMetadata(buffer) {\n  const metadata = borsh.deserializeUnchecked(METADATA_SCHEMA, Metadata, buffer);\n  return metadata;\n}\n\nconst bytePublicKeyToString = (bytes: any): string => {\n  return new PublicKey(bytes).toBase58();\n};\n\nexport const NFTList: FC = (props) => {\n  const { connection } = useConnection();\n  const { publicKey, adapter } = useWallet();\n  const [accounts, setAccounts] = useState(null as any);\n\n  useEffect(() => {\n    const fn = async () => {\n      if (publicKey) {\n        const nfts: any[] = [];\n        const accs = await connection.getParsedTokenAccountsByOwner(publicKey, { programId: TOKEN_PROGRAM_ID });\n        // const candyAddress = \"GPPD7mPAgsvA1T9tKYirfqx89sZqZMyVvAKM83bVcK8c\"\n        const candyAddress = CANDY_MACHINE_ID.toBase58(); // cryptoveras\n\n        for (let val of accs.value) {\n          // console.log(val.account.data.parsed.info)\n          // const acc = await connection.getParsedAccountInfo(new PublicKey(val.account.data.parsed.info.mint))\n          // console.log(acc.value?.data, acc.value?.owner.toString())\n\n          const meta = await getMetadata(new PublicKey(val.account.data.parsed.info.mint));\n          if (meta) {\n            // console.log('metadata addr', meta.toString())\n            const m = await connection.getAccountInfo(meta);\n            // console.log(bytePublicKeyToString(m?.owner))\n            const decoded = decodeMetadata(m?.data);\n            if (bytePublicKeyToString(decoded.data?.creators?.[0].address) === candyAddress) {\n              console.log(\"valid nft: \", decoded);\n              nfts.push(decoded);\n            }\n          }\n\n          // console.log(decoded)\n          // console.log(bytePublicKeyToString(decoded.updateAuthority))\n          // console.log('creator 0:', bytePublicKeyToString(decoded.data.creators?.[0].address), decoded.data.creators?.[0].verified)\n          // console.log('creator 1:', bytePublicKeyToString(decoded.data.creators?.[1].address), decoded.data.creators?.[1].verified)\n        }\n\n        // const nfts = await connection.getParsedProgramAccounts(METADATA_PROGRAM_ID,  {\n        //   filters: [{\n        //     memcmp: {\n        //       offset:\n        //         1 + // key\n        //         32 + // update auth\n        //         32 + // mint\n        //         4 + // name string length\n        //         MAX_NAME_LENGTH + // name\n        //         4 + // uri string length\n        //         MAX_URI_LENGTH + // uri*\n        //         4 + // symbol string length\n        //         MAX_SYMBOL_LENGTH + // symbol\n        //         2 + // seller fee basis points\n        //         1 + // whether or not there is a creators vec\n        //         4 + // creators vec length\n        //         0 * MAX_CREATOR_LEN,\n        //       bytes: candyAddress,\n        //     }\n        //   }]\n        // })\n\n        // for (let n of nfts) {\n        //   const decoded = decodeMetadata(n.account.data)\n        //   console.log(decoded)\n        // }\n\n        setAccounts(nfts);\n      }\n    };\n    fn();\n  }, [connection, publicKey]);\n\n  return <div></div>;\n};\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./components/Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\n\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n  getLedgerWallet,\n  getBloctoWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { NFTList } from \"./components/NFTList\"\nimport { CANDY_MACHINE_CONFIG, CANDY_MACHINE_ID, NETWORK, TREASURY } from \"./lib/constants\"\n\n\nconst rpcHost = `https://explorer-api.${NETWORK}.solana.com`;\n\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt('16326088986130000', 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(NETWORK), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getSolletWallet({ network: NETWORK }),\n      getSolletExtensionWallet({ network: NETWORK }),\n      getLedgerWallet(),\n      getBloctoWallet({ network: NETWORK }),\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={CANDY_MACHINE_ID}\n                config={CANDY_MACHINE_CONFIG}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={TREASURY}\n                txTimeout={txTimeout}\n              />\n              <NFTList />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}