{"version":3,"sources":["lib/candyMachine.ts","lib/constants.ts","lib/accounts.ts","lib/types.ts","lib/instructions.ts","components/HeaderButton.tsx","components/Typography.tsx","components/RoadmapSection.tsx","components/CountdownTimer.tsx","components/HomeContent.tsx","components/Home.tsx","components/NFTList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","ms","CANDY_MACHINE","CANDY_MACHINE_PROGRAM_ID","CONFIG_ARRAY_START","CONFIG_LINE_SIZE","TREASURY","CANDY_MACHINE_CONFIG","CANDY_MACHINE_ID","NETWORK","PUBLIC_URL","decodeMetadata","buffer","borsh","METADATA_SCHEMA","Metadata","MetadataKey","Creator","args","address","verified","share","this","Data","name","symbol","uri","sellerFeeBasisPoints","creators","key","primarySaleHappened","isMutable","edition","MetadataV1","Map","supply","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","kind","fields","type","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","createConfigAccount","anchorProgram","configData","payerWallet","configAccount","size","maxNumberOfLines","Math","ceil","HeaderButton","withStyles","root","backgroundImage","lineHeight","padding","fontFamily","Button","HeaderText","props","style","fontWeight","fontSize","children","Title","Subtitle","Text","RoadmapSection","title","subtitle","text","image","reverse","content","Grid","item","md","xs","margin","container","spacing","color","alignItems","CounterText","styled","CountdownTimer","startDate","setIsActive","date","onMount","completed","onComplete","renderer","renderCounter","zeroPad","length","strValue","String","match","prefix","suffix","strNo","paddedNo","Array","map","join","slice","days","hours","minutes","seconds","Content","en","nav","about","roadmap","traits","lang","hero","header","text2","roadmapHeader","giveaways","cryptopens","allsolday","merch","traitsHeader","comingSoon","esp","useStyles","WalletDialogButton","div","makeStyles","theme","majorTitle","breakpoints","up","roadmapSectionContainer","roadmapSectionAlt","backgroundColor","Home","useState","setBalance","setIsSoldOut","isMinting","setItemsRemaining","aboutRef","useRef","roadmapRef","traitsRef","setLang","open","message","severity","undefined","alertState","setAlertState","useTheme","isMobile","useMediaQuery","down","classes","setStartDate","useAnchorWallet","setCandyMachine","useEffect","getBalance","balance","LAMPORTS_PER_SOL","toggleLang","useCallback","paddingTop","src","animationDuration","aspectRatio","position","height","width","top","left","right","onClick","textAlign","marginBottom","Container","display","flexDirection","gap","current","scrollIntoView","borderRadius","ref","marginTop","className","justifyContent","paddingBottom","Snackbar","autoHideDuration","onClose","Alert","NFTList","useConnection","useWallet","adapter","setAccounts","nfts","getParsedTokenAccountsByOwner","accs","candyAddress","toBase58","val","parsed","info","meta","getAccountInfo","m","decoded","bytes","push","fn","rpcHost","Connection","startDateSeed","createTheme","palette","overrides","MuiButtonBase","MuiButton","textTransform","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","network","getSolletExtensionWallet","getLedgerWallet","getBloctoWallet","ThemeProvider","autoConnect","txTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49d5e4fd.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\"\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\"\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n)\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n)\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n)\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n  program: anchor.Program\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine\n  itemsAvailable: number\n  itemsRedeemed: number\n  itemsRemaining: number\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  }\n  let subId = 0\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return\n      }\n      done = true\n      console.log(\"Rejecting for timeout...\")\n      reject({ timeout: true })\n    }, timeout)\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          }\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err)\n            reject(status)\n          } else {\n            console.log(\"Resolved via websocket\", result)\n            resolve(status)\n          }\n        },\n        commitment\n      )\n    } catch (e) {\n      done = true\n      console.error(\"WS error in setup\", txid, e)\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ])\n          status = signatureStatuses && signatureStatuses.value[0]\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status)\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status)\n              done = true\n              reject(status.err)\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status)\n            } else {\n              console.log(\"REST confirmation for\", txid, status)\n              done = true\n              resolve(status)\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e)\n          }\n        }\n      })()\n      await sleep(2000)\n    }\n  })\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId)\n  }\n  done = true\n  console.log(\"Returning status\", status)\n  return status\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  })\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  })\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  )\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider)\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId)\n  const itemsAvailable = state.data.itemsAvailable.toNumber()\n  const itemsRedeemed = state.itemsRedeemed.toNumber()\n  const itemsRemaining = itemsAvailable - itemsRedeemed\n\n  let goLiveDate = state.data.goLiveDate.toNumber()\n  goLiveDate = new Date(goLiveDate * 1000)\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  }\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0]\n}\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0]\n}\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate()\n  const token = await getTokenWallet(payer, mint.publicKey)\n  const { connection, program } = candyMachine\n  const metadata = await getMetadata(mint.publicKey)\n  const masterEdition = await getMasterEdition(mint.publicKey)\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  )\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  })\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`\n}\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}","import { PublicKey } from '@solana/web3.js'\nimport * as anchor from \"@project-serum/anchor\"\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\n\nexport const CANDY_MACHINE = 'candy_machine'\n\nexport const CANDY_MACHINE_PROGRAM_ID = new PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n)\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n)\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n)\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n)\n\nexport const CONFIG_ARRAY_START =\n  32 + // authority\n  4 +\n  6 + // uuid + u32 len\n  4 +\n  10 + // u32 len + symbol\n  2 + // seller fee basis points\n  1 +\n  4 +\n  5 * 34 + // optional + u32 len + actual vec\n  8 + //max supply\n  1 + //is mutable\n  1 + // retain authority\n  4 // max number of lines;\nexport const CONFIG_LINE_SIZE = 4 + 32 + 4 + 200\n\nexport const CACHE_PATH = './.cache'\n\nexport const DEFAULT_TIMEOUT = 15000\n\nexport const EXTENSION_PNG = '.png'\nexport const EXTENSION_JSON = '.json'\n\n// token metadata\nexport const MAX_NAME_LENGTH = 32\nexport const MAX_URI_LENGTH = 200\nexport const MAX_SYMBOL_LENGTH = 10\nexport const MAX_CREATOR_LEN = 32 + 1 + 1\n\nexport const TREASURY = new anchor.web3.PublicKey(\n  '7HwCihoUb7dqTADf1eiQWF8xpXktXBGVyPRL6wJsW4w3'\n)\n\nexport const CANDY_MACHINE_CONFIG = new anchor.web3.PublicKey(\n  // 'H3jCihpqo8wxyx75zD1zkHP8UYdHv95mC83JnhTdzvmV'\n  'EPiLkpyrC1eVX6CeHYwJaZwu8pz5A52RMBtxH4dFgWVy'\n)\n\nexport const CANDY_MACHINE_ID = new anchor.web3.PublicKey(\n  // '3nLDcWScNi3ckzgLDLUN28vHxggYuwPRjGMWJ9TD6FtF'\n  '8JGeAZVEfYqV8ot9AArRpYdL83ZqtMR4nkuoLwYsuTBd'\n)\n\nexport const NETWORK = 'devnet' as WalletAdapterNetwork\n\n// export const PUBLIC_URL = '/cryptoveras'\nexport const PUBLIC_URL = process.env.PUBLIC_URL || ''","import { Connection, Keypair, PublicKey, SystemProgram } from '@solana/web3.js'\nimport {\n  CANDY_MACHINE,\n  CANDY_MACHINE_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from './constants'\nimport * as anchor from '@project-serum/anchor'\nimport fs from 'fs'\nimport BN from \"bn.js\"\nimport { createConfigAccount } from \"./instructions\"\nimport { Wallet } from '@solana/wallet-adapter-wallets'\nimport { SignerWalletAdapter, WalletAdapter } from '@solana/wallet-adapter-base'\nimport { Metadata, METADATA_SCHEMA } from './types'\nimport * as borsh from \"borsh\"\n\nexport const createConfig = async function (\n  anchorProgram: anchor.Program,\n  payerWallet: Keypair,\n  configData: {\n    maxNumberOfLines: BN\n    symbol: string\n    sellerFeeBasisPoints: number\n    isMutable: boolean\n    maxSupply: BN\n    retainAuthority: boolean\n    creators: {\n      address: PublicKey\n      verified: boolean\n      share: number\n    }[]\n  },\n) {\n  const configAccount = Keypair.generate()\n  const uuid = configAccount.publicKey.toBase58().slice(0, 6)\n\n  return {\n    config: configAccount.publicKey,\n    uuid,\n    txId: await anchorProgram.rpc.initializeConfig(\n      {\n        uuid,\n        ...configData,\n      },\n      {\n        accounts: {\n          config: configAccount.publicKey,\n          authority: payerWallet.publicKey,\n          payer: payerWallet.publicKey,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers: [payerWallet, configAccount],\n        instructions: [\n          await createConfigAccount(\n            anchorProgram,\n            configData,\n            payerWallet.publicKey,\n            configAccount.publicKey,\n          ),\n        ],\n      },\n    ),\n  }\n}\n\nexport const getTokenWallet = async function (\n  wallet: PublicKey,\n  mint: PublicKey,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    )\n  )[0]\n}\n\nexport const getCandyMachineAddress = async (\n  config: anchor.web3.PublicKey,\n  uuid: string,\n) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  )\n}\n\nexport const getConfig = async (\n  authority: anchor.web3.PublicKey,\n  uuid: string,\n) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(CANDY_MACHINE), authority.toBuffer(), Buffer.from(uuid)],\n    CANDY_MACHINE_PROGRAM_ID,\n  )\n}\n\nexport const getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0]\n}\n\nexport const getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0]\n}\n\nexport function loadWalletKey(keypair): Keypair {\n  return Keypair.fromSecretKey(\n    new Uint8Array(JSON.parse(fs.readFileSync(keypair).toString())),\n  )\n}\n\nexport async function loadAnchorProgram(wallet: SignerWalletAdapter, env: string) {\n  const solConnection = new anchor.web3.Connection(\n    `https://api.${env}.solana.com/`,\n  )\n  // const walletWrapper = new anchor.Wallet(walletKeyPair)\n\n  const provider = new anchor.Provider(solConnection, wallet as any, {\n    preflightCommitment: 'recent',\n  })\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM_ID, provider)\n  // console.log(JSON.stringify(idl, null, 2))\n  return new anchor.Program(idl, CANDY_MACHINE_PROGRAM_ID, provider)\n}\n\nexport function decodeMetadata(buffer) {\n  const metadata = borsh.deserializeUnchecked(METADATA_SCHEMA, Metadata, buffer)\n  return metadata\n}","import { BN } from '@project-serum/anchor'\nimport { PublicKey, AccountInfo } from '@solana/web3.js'\n\nexport class Creator {\n  address: PublicKey\n  verified: boolean\n  share: number\n\n  constructor(args: { address: PublicKey; verified: boolean; share: number }) {\n    this.address = args.address\n    this.verified = args.verified\n    this.share = args.share\n  }\n}\n\nexport interface Config {\n  authority: PublicKey\n  data: ConfigData\n}\n\nexport class ConfigData {\n  name: string\n  symbol: string\n  uri: string\n  sellerFeeBasisPoints: number\n  creators: Creator[] | null\n  maxNumberOfLines: BN | number\n  isMutable: boolean\n  maxSupply: BN\n  retainAuthority: boolean\n\n  constructor(args: {\n    name: string\n    symbol: string\n    uri: string\n    sellerFeeBasisPoints: number\n    creators: Creator[] | null\n    maxNumberOfLines: BN\n    isMutable: boolean\n    maxSupply: BN\n    retainAuthority: boolean\n  }) {\n    this.name = args.name\n    this.symbol = args.symbol\n    this.uri = args.uri\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints\n    this.creators = args.creators\n    this.maxNumberOfLines = args.maxNumberOfLines\n    this.isMutable = args.isMutable\n    this.maxSupply = args.maxSupply\n    this.retainAuthority = args.retainAuthority\n  }\n}\n\nexport type AccountAndPubkey = {\n  pubkey: string\n  account: AccountInfo<Buffer>\n}\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey\n  supply: BN\n  maxSupply?: BN\n  printingMint: PublicKey\n  oneTimePrintingAuthorizationMint: PublicKey\n  constructor(args: {\n    key: MetadataKey\n    supply: BN\n    maxSupply?: BN\n    printingMint: PublicKey\n    oneTimePrintingAuthorizationMint: PublicKey\n  }) {\n    this.key = MetadataKey.MasterEditionV1\n    this.supply = args.supply\n    this.maxSupply = args.maxSupply\n    this.printingMint = args.printingMint\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey\n  supply: BN\n  maxSupply?: BN\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2\n    this.supply = args.supply\n    this.maxSupply = args.maxSupply\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey\n  ledger: number[]\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker\n    this.ledger = args.ledger\n  }\n}\n\nexport class Edition {\n  key: MetadataKey\n  parent: PublicKey\n  edition: BN\n  constructor(args: { key: MetadataKey; parent: PublicKey; edition: BN }) {\n    this.key = MetadataKey.EditionV1\n    this.parent = args.parent\n    this.edition = args.edition\n  }\n}\n\nexport class Data {\n  name: string\n  symbol: string\n  uri: string\n  sellerFeeBasisPoints: number\n  creators: Creator[] | null\n  constructor(args: {\n    name: string\n    symbol: string\n    uri: string\n    sellerFeeBasisPoints: number\n    creators: Creator[] | null\n  }) {\n    this.name = args.name\n    this.symbol = args.symbol\n    this.uri = args.uri\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints\n    this.creators = args.creators\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey\n  updateAuthority: PublicKey\n  mint: PublicKey\n  data: Data\n  primarySaleHappened: boolean\n  isMutable: boolean\n  masterEdition?: PublicKey\n  edition?: PublicKey\n  constructor(args: {\n    updateAuthority: PublicKey\n    mint: PublicKey\n    data: Data\n    primarySaleHappened: boolean\n    isMutable: boolean\n    masterEdition?: PublicKey\n  }) {\n    this.key = MetadataKey.MetadataV1\n    this.updateAuthority = args.updateAuthority\n    this.mint = args.mint\n    this.data = args.data\n    this.primarySaleHappened = args.primarySaleHappened\n    this.isMutable = args.isMutable\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    MasterEditionV1,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['supply', 'u64'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n        ['printingMint', 'pubkey'],\n        ['oneTimePrintingAuthorizationMint', [32]],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['supply', 'u64'],\n        ['maxSupply', { kind: 'option', type: 'u64' }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['parent', [32]],\n        ['edition', 'u64'],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: 'struct',\n      fields: [\n        ['name', 'string'],\n        ['symbol', 'string'],\n        ['uri', 'string'],\n        ['sellerFeeBasisPoints', 'u16'],\n        ['creators', { kind: 'option', type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: 'struct',\n      fields: [\n        ['address', [32]],\n        ['verified', 'u8'],\n        ['share', 'u8'],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['updateAuthority', [32]],\n        ['mint', [32]],\n        ['data', Data],\n        ['primarySaleHappened', 'u8'],\n        ['isMutable', 'u8'],\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['ledger', [31]],\n      ],\n    },\n  ],\n])\n","import {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js'\nimport {\n  CANDY_MACHINE_PROGRAM_ID,\n  CONFIG_ARRAY_START,\n  CONFIG_LINE_SIZE,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from './constants'\nimport * as anchor from '@project-serum/anchor'\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: PublicKey,\n  payer: PublicKey,\n  walletAddress: PublicKey,\n  splTokenMintAddress: PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  })\n}\n\nexport async function createConfigAccount(\n  anchorProgram,\n  configData,\n  payerWallet,\n  configAccount,\n) {\n  const size =\n    CONFIG_ARRAY_START +\n    4 +\n    configData.maxNumberOfLines.toNumber() * CONFIG_LINE_SIZE +\n    4 +\n    Math.ceil(configData.maxNumberOfLines.toNumber() / 8)\n\n  return anchor.web3.SystemProgram.createAccount({\n    fromPubkey: payerWallet,\n    newAccountPubkey: configAccount,\n    space: size,\n    lamports:\n      await anchorProgram.provider.connection.getMinimumBalanceForRentExemption(\n        size,\n      ),\n    programId: CANDY_MACHINE_PROGRAM_ID,\n  })\n}\n\nexport function createMetadataInstruction(\n  metadataAccount: PublicKey,\n  mint: PublicKey,\n  mintAuthority: PublicKey,\n  payer: PublicKey,\n  updateAuthority: PublicKey,\n  txnData: Buffer,\n) {\n  const keys = [\n    {\n      pubkey: metadataAccount,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: mintAuthority,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: updateAuthority,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n  return new TransactionInstruction({\n    keys,\n    programId: TOKEN_METADATA_PROGRAM_ID,\n    data: txnData,\n  })\n}\n\nexport function createMasterEditionInstruction(\n  metadataAccount: PublicKey,\n  editionAccount: PublicKey,\n  mint: PublicKey,\n  mintAuthority: PublicKey,\n  payer: PublicKey,\n  updateAuthority: PublicKey,\n  txnData: Buffer,\n) {\n\n  const keys = [\n    {\n      pubkey: editionAccount,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: updateAuthority,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: mintAuthority,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: metadataAccount,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n  return new TransactionInstruction({\n    keys,\n    programId: TOKEN_METADATA_PROGRAM_ID,\n    data: txnData,\n  })\n}","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { createTheme, withStyles, makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\n\nexport const HeaderButton = withStyles({\n  root: {\n    backgroundImage: \"linear-gradient(180deg, #3D3D3D 0%, #000000 100%)\",\n    lineHeight: 1,\n    padding: \"12px 18px\",\n    \"&:hover\": {\n      backgroundImage: \"linear-gradient(180deg, #424242 0%, #050505 100%)\",\n    },\n    fontFamily: \"GT-Cinetype-Regular\",\n  },\n})(Button);\n","import React from \"react\";\n\nexport const HeaderText = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 400,\n        fontSize: 48,\n        // lineHeight: 2,\n        fontFamily: \"GT-Super-Display-Regular\",\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport const Title = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 900,\n        fontSize: 48,\n        // lineHeight: 1.5,\n        fontFamily: \"GT-Cinetype-Regular\",\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport const Subtitle = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 900,\n        fontSize: 32,\n        lineHeight: 1,\n        fontFamily: \"GT-Cinetype-Regular\",\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport const Text = (props) => {\n  return (\n    <span\n      style={{\n        fontWeight: 400,\n        fontSize: 24,\n        lineHeight: 1.5,\n        fontFamily: \"GT-Cinetype-Regular\",\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n","import React from \"react\";\nimport { Subtitle, Text, Title } from \"./Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport const RoadmapSection = ({ title, subtitle, text, image, reverse = false }) => {\n  const content = [\n    <Grid item md={7} xs={12} key=\"content\">\n      <div>\n        <Subtitle>{subtitle}</Subtitle>\n      </div>\n      <div style={{ margin: \"30px 0\" }}>\n        <Title>{title}</Title>\n      </div>\n      <div>\n        <Text>{text}</Text>\n      </div>\n    </Grid>,\n    <Grid item md={5} xs={12} key=\"image\">\n      {image}\n    </Grid>,\n  ];\n\n  return (\n    <Grid container spacing={6} style={{ color: \"white\", alignItems: \"center\" }}>\n      {reverse ? content.reverse() : content}\n    </Grid>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\n\nconst CounterText = styled.span`\n  font-family: \"GT-Cinetype-Regular\";\n`;\n\nexport const CountdownTimer = ({ startDate, setIsActive }) => {\n  return (\n    <Countdown\n      date={startDate}\n      onMount={({ completed }) => completed && setIsActive(true)}\n      onComplete={() => setIsActive(true)}\n      renderer={renderCounter}\n    />\n  );\n};\n\nexport function zeroPad(value: number | string, length: number = 2): string {\n  const strValue = String(value);\n  if (length === 0) return strValue;\n  const match = strValue.match(/(.*?)([0-9]+)(.*)/);\n  const prefix = match ? match[1] : \"\";\n  const suffix = match ? match[3] : \"\";\n  const strNo = match ? match[2] : strValue;\n  const paddedNo =\n    strNo.length >= length ? strNo : ([...Array(length)].map(() => \"0\").join(\"\") + strNo).slice(length * -1);\n  return `${prefix}${paddedNo}${suffix}`;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {days}d {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n    </CounterText>\n  );\n};\n","import React from \"react\";\n\nexport const Content = {\n  en: {\n    nav: {\n      about: \"About\",\n      roadmap: \"Roadmap\",\n      traits: \"Traits & Rarity\",\n      lang: \"English 🇬🇧 \",\n    },\n    hero: {\n      title: \"Enter the Crypt\",\n      date: \"Midnight. October 28th\",\n    },\n    about: {\n      header: \"The CryptoVeras\",\n      text: `On October 28st, the CryptoVeras return from heaven to visit with their loved ones. Waking from their eternal sleep. 5, 252 CryptoVeras will enter the Solana metaverse. And then, on All SOLs Day, in the dead of night, the CryptoVidas will join them, airdropped on all holders of CryptoVeras at 11: 59PM CDT.`,\n      text2: `Want a custom piece? The first ten to collect CryptoVeras and CryptoVidas with more than one matching trait will receive a custom NFT with personalized art. Tweet your wallet address with #AllSOLsDay and pictures of your art to enter..`,\n    },\n    roadmapHeader: \"The Roadmap\",\n    giveaways: {\n      title: \"Giveaways from Heaven\",\n      subtitle: \"Live Now!\",\n      text: \"A few CryptoVeras have escaped early. Watch out for giveaways from your favorite influencers, NFT projects and marketplaces.\",\n    },\n    cryptopens: {\n      subtitle: \"October 28th\",\n      title: \"The Crypt Opens\",\n      text: \"5,252 CryptoVeras descend on the metaverse at 11:59PM CDT. The total possible number of unique NFTs for CryptoVeras is 97,297,200. The rarest trait combination is about 40 billion times less likely to occur than the most common trait combination. Which one will you get?\",\n    },\n    allsolday: {\n      subtitle: \"October 31st\",\n      title: \"All SOLs Day\",\n      text: \"On Halloween’s eve, at 11:59PM CDT the magic happens. The CryptoVidas airdrop to join our CryptoVeras for Dia de Los Muertos. The first ten people to collect a Cryptovida and Cryptovera with more than one matching trait will receive a custom and personalized NFT. Tweet your wallet address, pictures of your NFTs with #AllSOLsDay to enter. Happy hunting!\",\n    },\n    merch: {\n      subtitle: \"November 10th\",\n      title: \"Heavenly Merch\",\n      text: \"For everyone else who is able to find matching CryptoVeras and CryptoVidas by November 10th, enter to win a custom shirt with one of your NFTs on the front. Tweet #AllSOLsDay with the art and your wallet address to enter and 100 winners will be picked at random.\",\n    },\n    traitsHeader: \"Traits & Rarities\",\n    comingSoon: \"Coming Soon\",\n  },\n  esp: {\n    nav: {\n      about: \"Sobre\",\n      roadmap: \"Hoja de ruta\",\n      traits: \"Rasgos y rarezas\",\n      lang: \"Español 🇪🇸 \",\n    },\n    hero: {\n      title: \"Entrar en la cripta\",\n      date: \"Medianoche. 28 de octubre\",\n    },\n    about: {\n      header: \"Las CryptoVeras\",\n      text: `El 28 de octubre, las CryptoVeras regresan del cielo para visitar a sus seres queridos. Despertando de su sueño eterno. 5.252 CryptoVeras ingresarán al metaverso de Solana. Y luego, en el Día de Todos los SOL, en la oscuridad de la noche, las CryptoVidas se les unirán, lanzadas desde el aire a todos los poseedores de CryptoVeras a las 11:59 PM CDT. `,\n      text2: `¿Quieres una pieza personalizada? Los primeros diez en recopilar CryptoVeras y CryptoVidas con más de un rasgo coincidente recibirán un NFT personalizado con arte personalizado. Tuitea la dirección de tu billetera con #AllSOLsDay e imágenes de tu arte para ingresar.`,\n    },\n    roadmapHeader: \"La hoja de ruta\",\n    giveaways: {\n      title: \"Sorteos del cielo\",\n      subtitle: \"¡Vive ahora!\",\n      text: \"Algunas CryptoVeras se han escapado antes. Esté atento a los obsequios de sus influencers favoritos, proyectos de NFT y mercados. \",\n    },\n    cryptopens: {\n      subtitle: \"28 de octubre\",\n      title: \"La cripta se abre\",\n      text: \"5.252 CryptoVeras descienden en el metaverso a las 11:59 PM CDT. El número total posible de NFT únicos para CryptoVeras es 97,297,200. La combinación de rasgos más rara es aproximadamente 40 mil millones de veces menos probable que ocurra que la combinación de rasgos más común. ¿Cuál vas a conseguir?\",\n    },\n    allsolday: {\n      subtitle: \"31 de octubre\",\n      title: \"Día de todos los SOL\",\n      text: \"En la víspera de Halloween, a las 11:59 p.m. CDT, ocurre la magia. El lanzamiento aéreo de CryptoVidas para unirse a nuestras CryptoVeras para el Día de Los Muertos. Las primeras diez personas que recopilen una Cryptovida y una Cryptovera con más de un rasgo coincidente recibirán un NFT personalizado y personalizado. Tuitea la dirección de tu billetera, fotos de tus NFT con #AllSOLsDay para ingresar. ¡Feliz cacería!\",\n    },\n    merch: {\n      subtitle: \"10 de noviembre\",\n      title: \"Mercancía celestial\",\n      text: \"Para todos los demás que puedan encontrar CryptoVeras y CryptoVidas coincidentes antes del 10 de noviembre, ingresen para ganar una camiseta personalizada con uno de sus NFT en el frente. Tuitea #AllSOLsDay con el arte y la dirección de tu billetera para participar y se elegirán 100 ganadores al azar.\",\n    },\n    traitsHeader: \"Rasgos y rarezas\",\n    comingSoon: \"Próximamente\",\n  },\n};\n","import { useEffect, useState, useRef, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Button,\n  Container,\n  CircularProgress,\n  Grid,\n  Snackbar,\n  useTheme,\n  useMediaQuery,\n  makeStyles,\n} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Image from \"material-ui-image\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"../lib/candyMachine\";\nimport { PUBLIC_URL } from \"../lib/constants\";\nimport { HeaderButton } from \"./HeaderButton\";\nimport { HeaderText, Text, Title, Subtitle } from \"./Typography\";\nimport { RoadmapSection } from \"./RoadmapSection\";\nimport { CountdownTimer } from \"./CountdownTimer\";\nimport { Content } from \"./HomeContent\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst MintContainer = styled.div``;\n\nconst MintButton = styled(Button)``;\n\nconst useStyles = makeStyles((theme) => ({\n  majorTitle: {\n    [theme.breakpoints.up(\"xs\")]: {\n      margin: \"50px 0\",\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      margin: \"80px 0\",\n    },\n  },\n  roadmapSectionContainer: {\n    [theme.breakpoints.up(\"xs\")]: {\n      padding: \"50px 20px\",\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      padding: \"100px 100px\",\n    },\n  },\n  roadmapSectionAlt: {\n    backgroundColor: \"#151515\",\n  },\n}));\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number | Date;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const aboutRef = useRef<any>(null);\n  const roadmapRef = useRef<any>(null);\n  const traitsRef = useRef<any>(null);\n  const [lang, setLang] = useState<\"en\" | \"esp\">(\"esp\");\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const classes = useStyles();\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(candyMachine, props.config, wallet.publicKey, props.treasury);\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(() => {\n    (async () => {\n      if (!wallet) return;\n\n      const { candyMachine, goLiveDate, itemsRemaining } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setIsSoldOut(itemsRemaining === 0);\n      setItemsRemaining(itemsRemaining);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection, isMinting]);\n\n  const toggleLang = useCallback(() => {\n    if (lang === \"en\") {\n      setLang(\"esp\");\n    } else {\n      setLang(\"en\");\n    }\n  }, [lang, setLang]);\n\n  return (\n    <main style={{ backgroundColor: \"black\" }}>\n      {isMobile ? (\n        <>\n          <div style={{ paddingTop: 50 }}>\n            <Image\n              src={`${PUBLIC_URL}/banner.jpg`}\n              animationDuration={1000}\n              aspectRatio={1500 / 960}\n              style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n            />\n            <Image\n              src={`${PUBLIC_URL}/logo.png`}\n              animationDuration={1000}\n              style={{\n                position: \"absolute\",\n                paddingTop: 0,\n                height: 100,\n                width: 100,\n                top: 20,\n                left: 10,\n                backgroundColor: \"rgba(0,0,0,0)\",\n              }}\n            />\n            <div style={{ position: \"absolute\", top: 20, right: 10 }}>\n              <HeaderButton onClick={() => toggleLang()}>{Content[lang].nav.lang}</HeaderButton>\n            </div>\n          </div>\n          <div\n            style={{\n              backgroundImage: \"linear-gradient(180deg, #3D3D3D 0%, #000000 100%)\",\n              right: 70,\n              padding: 36,\n              top: \"50%\",\n              textAlign: \"center\",\n            }}\n          >\n            <div style={{ fontWeight: 900, color: \"white\", marginBottom: 24 }}>\n              <HeaderText style={{ fontSize: 32 }}>{Content[lang].hero.title}</HeaderText>\n              <div>\n                <CountdownTimer startDate={startDate} setIsActive={setIsActive} />\n              </div>\n            </div>\n            <div style={{ backgroundColor: \"#FFA16C\", padding: \"18px 20px\" }}>\n              <Text style={{ fontWeight: 700, fontSize: 22 }}>{Content[lang].hero.date}</Text>\n            </div>\n          </div>\n        </>\n      ) : (\n        <Container>\n          <div style={{ paddingTop: 98, position: \"relative\" }}>\n            <Image\n              src={`${PUBLIC_URL}/banner.jpg`}\n              animationDuration={1000}\n              aspectRatio={1500 / 960}\n              style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n            />\n            <Image\n              src={`${PUBLIC_URL}/logo.png`}\n              animationDuration={1000}\n              style={{\n                backgroundColor: \"rgba(0,0,0,0)\",\n                position: \"absolute\",\n                paddingTop: 0,\n                height: 200,\n                width: 200,\n                top: 70,\n                left: 88,\n              }}\n            />\n            <div style={{ position: \"absolute\", top: 70, right: 70, display: \"flex\", flexDirection: \"row\", gap: 10 }}>\n              <HeaderButton\n                onClick={() => {\n                  if (aboutRef?.current) {\n                    aboutRef.current.scrollIntoView();\n                  }\n                }}\n              >\n                {Content[lang].nav.about}\n              </HeaderButton>\n              <HeaderButton\n                onClick={() => {\n                  if (roadmapRef?.current) {\n                    roadmapRef.current.scrollIntoView();\n                  }\n                }}\n              >\n                {Content[lang].nav.roadmap}\n              </HeaderButton>\n              <HeaderButton\n                onClick={() => {\n                  if (traitsRef?.current) {\n                    traitsRef.current.scrollIntoView();\n                  }\n                }}\n              >\n                {Content[lang].nav.traits}\n              </HeaderButton>\n              <HeaderButton onClick={() => toggleLang()}>{Content[lang].nav.lang}</HeaderButton>\n            </div>\n            <div\n              style={{\n                position: \"absolute\",\n                backgroundImage: \"linear-gradient(180deg, #3D3D3D 0%, #000000 100%)\",\n                borderRadius: 8,\n                right: 70,\n                padding: 36,\n                top: \"50%\",\n                textAlign: \"center\",\n              }}\n            >\n              <div style={{ fontWeight: 900, color: \"white\", marginBottom: 24 }}>\n                <HeaderText style={{ fontSize: 32 }}>{Content[lang].hero.title}</HeaderText>\n                <div>\n                  <CountdownTimer startDate={startDate} setIsActive={setIsActive} />\n                </div>\n              </div>\n              <div style={{ backgroundColor: \"#FFA16C\", padding: \"18px 20px\" }}>\n                <Text style={{ fontWeight: 700, fontSize: 22 }}>{Content[lang].hero.date}</Text>\n              </div>\n            </div>\n          </div>\n        </Container>\n      )}\n      <Container>\n        <div ref={aboutRef} style={{ padding: `${isMobile ? \"20px 0 20px 0\" : \"70px\"}`, position: \"relative\" }}>\n          <div\n            style={{\n              color: \"white\",\n              backgroundColor: \"#151515\",\n              padding: `${isMobile ? \"100px 20px 50px 20px\" : \"100px 50px 50px 50px\"}`,\n              marginTop: 100,\n              borderRadius: 5,\n            }}\n          >\n            <div className={classes.majorTitle} style={{ textAlign: \"center\" }}>\n              <HeaderText>{Content[lang].about.header}</HeaderText>\n            </div>\n            <Text>{Content[lang].about.text}</Text>\n            <Text>\n              <br />\n              <br />\n            </Text>\n            <Text>{Content[lang].about.text2}</Text>\n          </div>\n          <div\n            style={{\n              width: \"100%\",\n              position: \"absolute\",\n              top: isMobile ? 20 : 70,\n              left: 0,\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Image\n              src={`${PUBLIC_URL}/about.png`}\n              animationDuration={1000}\n              style={{\n                height: 200,\n                width: 200,\n                paddingTop: 0,\n                backgroundColor: \"rgba(0,0,0,0)\",\n              }}\n            />\n          </div>\n        </div>\n\n        <div ref={roadmapRef} style={{ color: \"white\", textAlign: \"center\" }}>\n          <Image\n            src={`${PUBLIC_URL}/roadmap.jpg`}\n            animationDuration={1000}\n            aspectRatio={1440 / 886}\n            style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n          />\n          <div className={classes.majorTitle}>\n            <HeaderText>{Content[lang].roadmapHeader}</HeaderText>\n          </div>\n        </div>\n      </Container>\n      <section className={classes.roadmapSectionAlt}>\n        <Container className={classes.roadmapSectionContainer}>\n          <RoadmapSection\n            subtitle={Content[lang].giveaways.subtitle}\n            title={Content[lang].giveaways.title}\n            text={Content[lang].giveaways.text}\n            image={\n              <Image\n                src={`${PUBLIC_URL}/giveaways.jpg`}\n                animationDuration={1000}\n                aspectRatio={575 / 360}\n                style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n              />\n            }\n          />\n        </Container>\n      </section>\n      <section>\n        <Container className={classes.roadmapSectionContainer}>\n          <RoadmapSection\n            reverse={!isMobile}\n            subtitle={Content[lang].cryptopens.subtitle}\n            title={Content[lang].cryptopens.title}\n            text={Content[lang].cryptopens.text}\n            image={\n              <Image\n                src={`${PUBLIC_URL}/cryptopens.png`}\n                animationDuration={1000}\n                style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n              />\n            }\n          />\n        </Container>\n      </section>\n      {/* <section className={classes.roadmapSectionAlt}>\n        <Container>\n          <RoadmapSection\n            subtitle=\"October 31st\"\n            title=\"Secondary Sales on Magic Eden\"\n            text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Suspendisse sed nisi lacus sed. In hac habitasse platea dictumst vestibulum rhoncus est. Lacus viverra vitae congue eu consequat ac.\"\n            image={\n              <Image\n                src={`${PUBLIC_URL}/magiceden.png`}\n                animationDuration={1000}\n                aspectRatio={415 / 73}\n                style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n              />\n            }\n          />\n        </Container>\n      </section> */}\n      <section className={classes.roadmapSectionAlt}>\n        <Container className={classes.roadmapSectionContainer}>\n          <RoadmapSection\n            subtitle={Content[lang].allsolday.subtitle}\n            title={Content[lang].allsolday.title}\n            text={Content[lang].allsolday.text}\n            image={\n              <Image\n                src={`${PUBLIC_URL}/allsolday.png`}\n                animationDuration={1000}\n                style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n              />\n            }\n          />\n        </Container>\n      </section>\n      <section>\n        <Container className={classes.roadmapSectionContainer}>\n          <RoadmapSection\n            reverse={!isMobile}\n            subtitle={Content[lang].merch.subtitle}\n            title={Content[lang].merch.title}\n            text={Content[lang].merch.text}\n            image={\n              <Image\n                src={`${PUBLIC_URL}/heavenlymerch.png`}\n                animationDuration={1000}\n                style={{ backgroundColor: \"rgba(0,0,0,0)\" }}\n              />\n            }\n          />\n        </Container>\n      </section>\n      <section>\n        <Container style={{ textAlign: \"center\", paddingBottom: 50 }}>\n          <div ref={traitsRef} className={classes.majorTitle} style={{ color: \"white\" }}>\n            <HeaderText>{Content[lang].traitsHeader}</HeaderText>\n          </div>\n          <div\n            style={{\n              backgroundColor: \"#151515\",\n              borderRadius: 5,\n              margin: \"50px 50px 0 50px\",\n              padding: \"200px 0\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Title style={{ color: \"rgba(255, 255, 255, 0.48)\", fontWeight: 400, margin: \"0 50px\" }}>\n              {Content[lang].comingSoon}\n            </Title>\n          </div>\n        </Container>\n      </section>\n\n      {/* <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        direction=\"column\"\n        justify=\"center\"\n        style={{ minHeight: \"30vh\" }}\n      >\n        <Grid item xs={3}>\n          {wallet && (\n            <Grid item>\n              <p>Address: {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n            </Grid>\n          )}\n\n          {wallet && <p>My Balance: {(balance || 0).toLocaleString()} SOL</p>}\n\n          {wallet && <p>NFTs remaining: {itemsRemaining}</p>}\n\n          <MintContainer>\n            {!wallet ? (\n              <ConnectButton>Connect Wallet</ConnectButton>\n            ) : (\n              <MintButton disabled={isSoldOut || isMinting || !isActive} onClick={onMint} variant=\"contained\">\n                {isSoldOut ? (\n                  \"SOLD OUT\"\n                ) : isActive ? (\n                  isMinting ? (\n                    <CircularProgress />\n                  ) : (\n                    \"MINT\"\n                  )\n                ) : (\n                  <Countdown\n                    date={startDate}\n                    onMount={({ completed }) => completed && setIsActive(true)}\n                    onComplete={() => setIsActive(true)}\n                    renderer={renderCounter}\n                  />\n                )}\n              </MintButton>\n            )}\n          </MintContainer>\n        </Grid>\n      </Grid> */}\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={10000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert onClose={() => setAlertState({ ...alertState, open: false })} severity={alertState.severity}>\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nexport default Home;\n","import React, { FC, useEffect, useCallback, useState } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { AccountInfo as TokenAccountInfo, Token } from \"@solana/spl-token\";\nimport { CANDY_MACHINE_ID, CANDY_MACHINE_PROGRAM_ID } from \"../lib/constants\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { decodeMetadata, getMetadata } from \"../lib/accounts\";\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\"BPFLoaderUpgradeab1e11111111111111111111111\");\n\nexport const MEMO_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\n\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n\nexport const VAULT_ID = \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\";\n\nexport const AUCTION_ID = \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\";\n\nexport const METAPLEX_ID = \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\";\n\nconst bytePublicKeyToString = (bytes: any): string => {\n  return new PublicKey(bytes).toBase58();\n};\n\nexport const NFTList: FC = (props) => {\n  const { connection } = useConnection();\n  const { publicKey, adapter } = useWallet();\n  const [accounts, setAccounts] = useState(null as any);\n\n  useEffect(() => {\n    const fn = async () => {\n      if (publicKey) {\n        const nfts: any[] = [];\n        const accs = await connection.getParsedTokenAccountsByOwner(publicKey, { programId: TOKEN_PROGRAM_ID });\n        // const candyAddress = \"GPPD7mPAgsvA1T9tKYirfqx89sZqZMyVvAKM83bVcK8c\"\n        const candyAddress = CANDY_MACHINE_ID.toBase58(); // cryptoveras\n\n        for (let val of accs.value) {\n          // console.log(val.account.data.parsed.info)\n          // const acc = await connection.getParsedAccountInfo(new PublicKey(val.account.data.parsed.info.mint))\n          // console.log(acc.value?.data, acc.value?.owner.toString())\n\n          const meta = await getMetadata(new PublicKey(val.account.data.parsed.info.mint));\n          if (meta) {\n            // console.log('metadata addr', meta.toString())\n            const m = await connection.getAccountInfo(meta);\n            // console.log(bytePublicKeyToString(m?.owner))\n            const decoded = decodeMetadata(m?.data);\n            if (bytePublicKeyToString(decoded.data?.creators?.[0].address) === candyAddress) {\n              console.log(\"valid nft: \", decoded);\n              nfts.push(decoded);\n            }\n          }\n\n          // console.log(decoded)\n          // console.log(bytePublicKeyToString(decoded.updateAuthority))\n          // console.log('creator 0:', bytePublicKeyToString(decoded.data.creators?.[0].address), decoded.data.creators?.[0].verified)\n          // console.log('creator 1:', bytePublicKeyToString(decoded.data.creators?.[1].address), decoded.data.creators?.[1].verified)\n        }\n\n        // const nfts = await connection.getParsedProgramAccounts(METADATA_PROGRAM_ID,  {\n        //   filters: [{\n        //     memcmp: {\n        //       offset:\n        //         1 + // key\n        //         32 + // update auth\n        //         32 + // mint\n        //         4 + // name string length\n        //         MAX_NAME_LENGTH + // name\n        //         4 + // uri string length\n        //         MAX_URI_LENGTH + // uri*\n        //         4 + // symbol string length\n        //         MAX_SYMBOL_LENGTH + // symbol\n        //         2 + // seller fee basis points\n        //         1 + // whether or not there is a creators vec\n        //         4 + // creators vec length\n        //         0 * MAX_CREATOR_LEN,\n        //       bytes: candyAddress,\n        //     }\n        //   }]\n        // })\n\n        // for (let n of nfts) {\n        //   const decoded = decodeMetadata(n.account.data)\n        //   console.log(decoded)\n        // }\n\n        setAccounts(nfts);\n      }\n    };\n    fn();\n  }, [connection, publicKey]);\n\n  return <div></div>;\n};\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./components/Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\n\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n  getLedgerWallet,\n  getBloctoWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport { ConnectionProvider, WalletProvider } from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { NFTList } from \"./components/NFTList\";\nimport { CANDY_MACHINE_CONFIG, CANDY_MACHINE_ID, NETWORK, TREASURY } from \"./lib/constants\";\n\nconst rpcHost = `https://explorer-api.${NETWORK}.solana.com`;\n\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = new Date(\"2021-10-28T23:59:00-0500\");\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n  overrides: {\n    MuiButtonBase: {\n      root: {\n        justifyContent: \"flex-start\",\n      },\n    },\n    MuiButton: {\n      root: {\n        textTransform: undefined,\n        padding: \"12px 16px\",\n      },\n      startIcon: {\n        marginRight: 8,\n      },\n      endIcon: {\n        marginLeft: 8,\n      },\n    },\n  },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(NETWORK), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getSolletWallet({ network: NETWORK }),\n      getSolletExtensionWallet({ network: NETWORK }),\n      getLedgerWallet(),\n      getBloctoWallet({ network: NETWORK }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={CANDY_MACHINE_ID}\n              config={CANDY_MACHINE_CONFIG}\n              connection={connection}\n              startDate={startDateSeed}\n              treasury={TREASURY}\n              txTimeout={txTimeout}\n            />\n            <NFTList />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}